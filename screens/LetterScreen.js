import React, { useState } from "react";
import { View, Text, TouchableOpacity, StyleSheet, SafeAreaView } from "react-native";
import * as Speech from "expo-speech";
import { Ionicons } from "@expo/vector-icons";

export default function LetterScreen({ onBack, onNext, params }) {
  const { vowel } = params;
  const [isSpeaking, setIsSpeaking] = useState(false);

  // Data for each vowel with easy words and correct sounds
  const vowelData = {
    "ÿß": {
      sound: "ÿßÿß", // Alif ki basic sound
      examples: ["ÿßÿ®ÿß", "ÿßŸÖÿß⁄∫", "ÿßÿ±ÿØŸà", "ÿßÿ≥ÿ™ÿßÿØ", "ÿß⁄Ü⁄æÿß", "ÿßŸÜ⁄àÿß", "ÿßŸàŸÜŸπ"],
      practiceWords: ["ÿßÿ®ÿß", "ÿßŸÖÿß⁄∫", "ÿßÿ±ÿØŸà", "ÿßÿ≥ÿ™ÿßÿØ", "ÿß⁄Ü⁄æÿß"],
    },
    "Ÿà": {
      sound: "Ÿàÿß", // Waw ki sound "wa"
      examples: ["Ÿàÿß⁄∫", "Ÿà€Å", "ŸàÿßŸÜ", "Ÿàÿ∂Ÿà", "ŸàŸÇÿ™", "ŸàŸÑÿØ", "Ÿàÿ¨€Å"],
      practiceWords: ["Ÿàÿß⁄∫", "Ÿà€Å", "ŸàÿßŸÜ", "Ÿàÿ∂Ÿà", "ŸàŸÇÿ™"],
    },
    "ÿ°": {
      sound: "ÿßÿß", // Hamza ki sound "hamza"
      examples: ["ÿßŸéÿ®ÿ±", "ÿßŸêÿØ⁄æÿ±", "ÿßŸèÿØ⁄æÿ±", "ÿßŸéŸÖÿ±", "ÿßŸêÿ¥ÿßÿ±€Å", "ÿßŸèŸÅÿ™ÿßÿ®", "ÿßŸéŸÜÿ¨€åÿ±"],
      practiceWords: ["ÿßŸéÿ®ÿ±", "ÿßŸêÿØ⁄æÿ±", "ÿßŸèÿØ⁄æÿ±", "ÿßŸéŸÖÿ±", "ÿßŸêÿ¥ÿßÿ±€Å"],
    },
    "€å": {
      sound: "€åÿß", // Ya ki sound "ya"
      examples: ["€åÿßÿØ", "€å€Å", "€åÿßÿ±", "€åŸà⁄∫", "€å⁄©ÿ™ÿß", "€åÿÆ", "€åÿßÿ≥"],
      practiceWords: ["€åÿßÿØ", "€å€Å", "€åÿßÿ±", "€åŸà⁄∫", "€åÿÆ"],
    },
  };

  // ‚úÖ Quiz data for each vowel with easy words
  const quizBank = {
    "ÿß": [
      { question: "ÿßŸÑŸÅ ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ÿßÿ®ÿß", "⁄©ÿ™ÿßÿ®", "⁄Ø⁄æÿ±"], answer: "ÿßÿ®ÿß" },
      { question: "ÿßŸÑŸÅ ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ÿßŸÖÿß⁄∫", "ÿØÿ±ÿÆÿ™", "ÿ≥€åÿ®"], answer: "ÿßŸÖÿß⁄∫" },
      { question: "ÿßŸÑŸÅ ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ÿßÿ±ÿØŸà", "Ÿæ€Åÿß⁄ë", "ÿ®ŸÜÿØÿ±"], answer: "ÿßÿ±ÿØŸà" },
      { question: "ÿßŸÑŸÅ ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ÿßÿ≥ÿ™ÿßÿØ", "ÿØŸàÿ≥ÿ™", "ŸæÿßŸÜ€å"], answer: "ÿßÿ≥ÿ™ÿßÿØ" },
      { question: "ÿßŸÑŸÅ ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ÿß⁄Ü⁄æÿß", "⁄Ø⁄æÿ±", "⁄Ü⁄ë€åÿß"], answer: "ÿß⁄Ü⁄æÿß" },
    ],
    "Ÿà": [
      { question: "ŸàÿßŸà ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["Ÿàÿß⁄∫", "ÿ≥€åÿ®", "⁄©ÿ™ÿßÿ®"], answer: "Ÿàÿß⁄∫" },
      { question: "ŸàÿßŸà ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["Ÿà€Å", "ÿ≥ŸÅÿ±", "Ÿæ€Åÿß⁄ë"], answer: "Ÿà€Å" },
      { question: "ŸàÿßŸà ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ŸàÿßŸÜ", "ÿØÿ±ÿÆÿ™", "ÿ®ŸÜÿØÿ±"], answer: "ŸàÿßŸÜ" },
      { question: "ŸàÿßŸà ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["Ÿàÿ∂Ÿà", "ÿßŸÜÿßÿ±", "€åÿßÿØ"], answer: "Ÿàÿ∂Ÿà" },
      { question: "ŸàÿßŸà ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ŸàŸÇÿ™", "⁄Ø⁄æÿ±", "ŸæÿßŸÜ€å"], answer: "ŸàŸÇÿ™" },
    ],
    "ÿ°": [
      { question: "€ÅŸÖÿ≤€Å ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ÿßŸéÿ®ÿ±", "ŸàŸÇÿ™", "ÿØÿ±ÿÆÿ™"], answer: "ÿßŸéÿ®ÿ±" },
      { question: "€ÅŸÖÿ≤€Å ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ÿßŸêÿØ⁄æÿ±", "⁄©ÿ™ÿßÿ®", "ÿØŸàÿ≥ÿ™"], answer: "ÿßŸêÿØ⁄æÿ±" },
      { question: "€ÅŸÖÿ≤€Å ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ÿßŸèÿØ⁄æÿ±", "ÿ®ŸÜÿØÿ±", "€åÿßÿØ"], answer: "ÿßŸèÿØ⁄æÿ±" },
      { question: "€ÅŸÖÿ≤€Å ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ÿßŸéŸÖÿ±", "Ÿæ€Åÿß⁄ë", "⁄Ø⁄æÿ±"], answer: "ÿßŸéŸÖÿ±" },
      { question: "€ÅŸÖÿ≤€Å ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["ÿßŸêÿ¥ÿßÿ±€Å", "ÿ≥€åÿ®", "ŸæÿßŸÜ€å"], answer: "ÿßŸêÿ¥ÿßÿ±€Å" },
    ],
    "€å": [
      { question: "€åÿß ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["€åÿßÿØ", "⁄©ÿ™ÿßÿ®", "Ÿæ€Åÿß⁄ë"], answer: "€åÿßÿØ" },
      { question: "€åÿß ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["€å€Å", "ÿ≥€åÿ®", "ÿßŸÜÿßÿ±"], answer: "€å€Å" },
      { question: "€åÿß ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["€åÿßÿ±", "ÿØÿ±ÿÆÿ™", "ÿ≥ŸÅÿ±"], answer: "€åÿßÿ±" },
      { question: "€åÿß ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["€åŸà⁄∫", "ÿ®ŸÜÿØÿ±", "ÿØŸàÿ≥ÿ™"], answer: "€åŸà⁄∫" },
      { question: "€åÿß ÿ≥€í ⁄©ŸàŸÜ ÿ≥ÿß ŸÑŸÅÿ∏ ÿ¥ÿ±Ÿàÿπ €ÅŸàÿ™ÿß €Å€íÿü", options: ["€åÿÆ", "ŸæÿßŸÜ€å", "⁄Ø⁄æÿ±"], answer: "€åÿÆ" },
    ],
  };

  const currentVowel = vowelData[vowel] || vowelData["ÿß"];

  const speak = async (text) => {
    if (isSpeaking) await Speech.stop();
    setIsSpeaking(true);
    Speech.speak(text, {
      language: "ur",
      rate: 0.9,
      pitch: 1.0,
      onDone: () => setIsSpeaking(false),
      onStopped: () => setIsSpeaking(false),
    });
  };

  const playVowelSound = () => {
    speak(currentVowel.sound);
  };

  const handleQuizNavigate = () => {
    onNext({ 
      screen: "QuizScreen", 
      questions: quizBank[vowel] || [] 
    });
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Back Button */}
      <TouchableOpacity style={styles.backButton} onPress={onBack}>
        <Ionicons name="arrow-back" size={24} color="#2a52be" />
      </TouchableOpacity>

      <View style={styles.content}>
        {/* Vowel Display */}
        <View style={styles.section}>
          <Text style={styles.vowelDisplay}>{vowel}</Text>
        </View>

        {/* Sound Button */}
        <TouchableOpacity
          style={styles.soundButton}
          onPress={playVowelSound}
          disabled={isSpeaking}
        >
          <Text style={styles.buttonText}>
            {isSpeaking ? "⁄ÜŸÑ ÿ±€Åÿß €Å€í..." : "ÿ¢Ÿàÿßÿ≤ ÿ≥ŸÜ€å⁄∫"}
          </Text>
        </TouchableOpacity>

        {/* Example Words */}
        <View style={styles.section}>
          <Text style={styles.subtitle}>ŸÖÿ´ÿßŸÑ€å ÿßŸÑŸÅÿßÿ∏:</Text>
          <View style={styles.wordGrid}>
            {currentVowel.examples.map((word, index) => (
              <TouchableOpacity
                key={index}
                style={styles.wordCard}
                onPress={() => speak(word)}
                disabled={isSpeaking}
              >
                <Text style={styles.wordText}>{word}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>

        {/* Practice Words */}
        <View style={styles.section}>
          <Text style={styles.subtitle}>ŸÖÿ¥ŸÇ ⁄©€í ÿßŸÑŸÅÿßÿ∏:</Text>
          <View style={styles.wordGrid}>
            {currentVowel.practiceWords.map((word, index) => (
              <View key={index} style={styles.practiceWordCard}>
                <Text style={styles.practiceWordText}>{word}</Text>
              </View>
            ))}
          </View>
        </View>

        {/* üëá Quiz Button */}
        <TouchableOpacity
          style={styles.quizButton}
          onPress={handleQuizNavigate}
        >
          <Text style={styles.buttonText}>ŸÖÿ¥ŸÇ€å ÿ≥ŸàÿßŸÑÿßÿ™ Ÿæÿ± ÿ¨ÿßÿ¶€å⁄∫</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#fff" },
  content: { flex: 1, padding: 20, paddingTop: 40, justifyContent: "flex-start" },
  backButton: {
    position: "absolute", top: 40, left: 20, zIndex: 1, padding: 8,
    backgroundColor: "#e9f5ff", borderRadius: 40,
  },
  section: { marginBottom: 1, alignItems: "center" },
  vowelDisplay: { fontSize: 100, fontWeight: "bold", color: "#2a52be", textAlign: "center" },
  soundButton: {
    backgroundColor: "#4a90e2", padding: 15, borderRadius: 10,
    alignItems: "center", marginVertical: -15, marginHorizontal: 30,
  },
  buttonText: { color: "white", fontSize: 18, fontWeight: "bold" },
  subtitle: {
    fontSize: 20, fontWeight: "600", marginBottom: 10, marginTop: 35,
    color: "#4a90e2", textAlign: "center",
  },
  wordGrid: { flexDirection: "row", flexWrap: "wrap", justifyContent: "center" },
  wordCard: {
    backgroundColor: "#e9f5ff", padding: 12, borderRadius: 10,
    margin: 5, minWidth: 80, alignItems: "center",
  },
  wordText: { fontSize: 18, fontWeight: "bold", color: "#000" },
  practiceWordCard: {
    backgroundColor: "#f0f8ff", padding: 12, borderRadius: 10,
    margin: 5, minWidth: 80, alignItems: "center",
  },
  practiceWordText: { fontSize: 18, color: "#000" },
  quizButton: {
    backgroundColor: "#2a52be", padding: 15, borderRadius: 12,
    alignItems: "center", marginTop: 20,
  },
});